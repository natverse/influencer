% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/install-python.R
\name{install_python_influence_calculator}
\alias{install_python_influence_calculator}
\title{Install Python ConnectomeInfluenceCalculator Library}
\usage{
install_python_influence_calculator(
  method = "conda",
  conda_env = NULL,
  python_version = "3.12",
  force_reinstall = FALSE
)
}
\arguments{
\item{method}{Character. Installation method: "conda" (recommended) or "pip".}

\item{conda_env}{Character. Name of conda environment to create/use.
If NULL, uses "ic-venv" (recommended by ConnectomeInfluenceCalculator).}

\item{python_version}{Character. Python version for new conda environment
(default: "3.12" for compatibility).}

\item{force_reinstall}{Logical. Whether to reinstall even if already present.}
}
\value{
Invisible TRUE if successful, throws error otherwise.
}
\description{
This function helps install the Python ConnectomeInfluenceCalculator library
and its dependencies (PETSc and SLEPc) using conda. This method integrates
well with RStudio's r-miniconda environment system and includes automatic
fallback methods for common installation issues.
}
\details{
The function installs the ConnectomeInfluenceCalculator using robust methods
with automatic fallbacks for common issues. For the conda method (recommended), it:
\enumerate{
\item Fixes common conda solver issues (switches to classic solver)
\item Creates conda environment "ic-venv" with Python 3.13.1 (if not specified)
\item Installs PETSc/SLEPc with automatic MPI conflict detection and fallback
\item Installs ConnectomeInfluenceCalculator with automatic pyproject.toml fixing
}

\strong{Automatic Issue Resolution:}
\itemize{
\item \strong{MPI Conflicts}: Falls back to conda-forge pre-compiled packages when
mixed MPI implementations (e.g., Homebrew Open MPI + Conda MPICH) cause failures
\item \strong{pyproject.toml Issues}: Automatically fixes upstream license format validation
errors by converting \code{license = "BSD-3-Clause"} to \code{license = {text = "BSD-3-Clause"}}
\item \strong{Solver Issues}: Switches to classic conda solver to avoid libmamba problems
}

For the pip method, it attempts direct installation but this may fail on some
systems due to PETSc/SLEPc compilation issues.

\strong{Troubleshooting Common Issues:}
\itemize{
\item \strong{libmamba solver errors}: Function automatically switches to classic solver
\item \strong{Missing libarchive}: Usually resolved by switching conda solver
\item \strong{MPI compiler conflicts}: Function automatically falls back to conda-forge pre-compiled packages
\item \strong{pyproject.toml validation errors}: Function automatically fixes license format issues
\item \strong{Import failures}: Restart R session and try \code{reticulate::py_config()}
\item \strong{Environment conflicts}: Specify a dedicated \code{conda_env} name
\item \strong{Installation hangs}: Check internet connection and GitHub access
\item \strong{Version conflicts}: Try using the exact versions from ConnectomeInfluenceCalculator README
}

\strong{MPI Conflict Resolution:}
If you have mixed MPI implementations (e.g., Homebrew Open MPI + Conda MPICH),
the function automatically detects compilation failures and switches to conda-forge
pre-compiled packages, avoiding the need to compile against conflicting MPI libraries.
}
\examples{
\dontrun{
# Recommended: install using conda (creates "ic-venv" environment)
install_python_influence_calculator()

# Install in specific conda environment
install_python_influence_calculator(conda_env = "my-custom-env")

# Use different Python version
install_python_influence_calculator(python_version = "3.12")

# Force reinstallation
install_python_influence_calculator(force_reinstall = TRUE)
}
}

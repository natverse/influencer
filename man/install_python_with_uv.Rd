% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/install-python.R
\name{install_python_with_uv}
\alias{install_python_with_uv}
\title{Install ConnectomeInfluenceCalculator using Homebrew + UV}
\usage{
install_python_with_uv(
  env_name = "influence-py",
  check_dependencies = TRUE,
  force_reinstall = FALSE,
  warn_rstudio = TRUE
)
}
\arguments{
\item{env_name}{Character. Name of the UV environment to create (default: "influence-py").}

\item{check_dependencies}{Logical. Whether to check for Homebrew and UV first (default: TRUE).}

\item{force_reinstall}{Logical. Whether to remove existing environment first (default: FALSE).}

\item{warn_rstudio}{Logical. Whether to warn about RStudio compatibility (default: TRUE).}
}
\value{
Invisible TRUE if successful, throws error otherwise.
}
\description{
This function runs the installation script that uses Homebrew to install
PETSc and SLEPc core libraries, then UV to create a Python environment
and install ConnectomeInfluenceCalculator from GitHub.
}
\details{
\strong{RStudio Users}: This method creates environments outside of RStudio's r-miniconda
system. For better RStudio integration, consider using \code{install_python_influence_calculator()}
with conda instead, which works within RStudio's environment management system.

This function runs the bash script located at \code{inst/install_python_deps.sh}
which performs the following steps with automatic error recovery:
\enumerate{
\item Checks for Homebrew and UV prerequisites
\item Installs PETSc and SLEPc using Homebrew
\item Creates a UV virtual environment with Python 3.13.1
\item Installs petsc4py and slepc4py Python wrappers
\item Installs ConnectomeInfluenceCalculator from GitHub (with automatic pyproject.toml fix)
\item Tests the installation
}

\strong{Automatic Error Recovery:}
The script includes automatic fixes for common installation issues:
\itemize{
\item \strong{pyproject.toml Issues}: Automatically fixes upstream license format validation errors
\item \strong{Xcode Command Line Tools}: Provides clear guidance and fallback compilation options
\item \strong{Network Issues}: Multiple download methods and clear error reporting
}

\strong{Prerequisites:}
\itemize{
\item Homebrew: \verb{/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"}
\item UV: \verb{brew install uv}
}

\strong{RStudio Integration:}
UV environments are stored at \verb{~/.local/share/uv/envs/} and may not integrate
seamlessly with RStudio's Python environment detection. You may need to manually
specify the environment path using \code{reticulate::use_virtualenv()} in each session.
}
\examples{
\dontrun{
# Install with default settings (will warn if RStudio detected)
install_python_with_uv()

# Install without RStudio warning
install_python_with_uv(warn_rstudio = FALSE)

# Install with custom environment name
install_python_with_uv(env_name = "my-influence-env")

# Force reinstallation
install_python_with_uv(force_reinstall = TRUE)

# For RStudio users, consider conda instead:
# install_python_influence_calculator()
}
}
